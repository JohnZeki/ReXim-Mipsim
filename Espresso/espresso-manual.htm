<HTML><HEAD> <TITLE>Command: espresso</TITLE> </HEAD><BODY BGCOLOR="#FFFFFF"><H1>ESPRESSO(1OCTTOOLS)</H1><P><DL><DT><B>NAME</B><DT><DD><B>espresso</B> - Boolean Minimization<DD><DT><B>SYNOPSIS</B><DT><DD><B>espresso</B> [options] [file]<DD><DT><B>DESCRIPTION</B><DD>Espresso takes  as  input a two-level representation of a two-valued(or multiple-valued) Boolean function, and pro- duces a minimal equivalentrepresentation.  The algorithms used are new and represent an advance in both  speed  and optimality  of solution in heuristic Boolean minimization.       Espresso reads the file provided (or standard input if  no       files  are  specified),  performs  the  minimization,  and       writes the minimized result to standard output.   Espresso       automatically  verifies  that  the  minimized  function is       equivalent to the original function.   Options  allow  for       using  an  exact  minimization  algorithm, for choosing an       optimal phase assignment for the output functions, and for       choosing  an  optimal  assignment  of  the inputs to input       decoders.<P>       The default input and output file formats  are  compatible       with   the  Berkeley  standard  format  for  the  physical       description of a PLA.  The input format  is  described  in       detail in espresso(5).  Note that the input file is a log-       ical representation of a set  of  Boolean  equations,  and       hence   the   input  format  differs  slightly  from  that       described in pla(5) (which provides for the physical  rep-       resentation  of a PLA).  The input and output formats have       been expanded to allow  for  multiple-valued  logic  func-       tions,  and  to  allow for the specification of the don't-       care set which will be used in the minimization.<P>       A complete list of  the  command  line  options  is  given       below.   Be  warned  that many of the command line options       are not intended for general use.<DL><DT>-d          <DD> Enables debugging.  Useful only for those famil-                 iar with the algorithms used.<P><DT>       -Dcheck  <DD>Checks  that  the function is a partition of the                 entire space (i.e., that the ON-set, OFF-set and                 DC-set  are  pairwise  disjoint,  and that their                 union is the Universe).<P><DT>       -Dd1merge<DD>Performs a quick distance-1 merge on  the  input                 file.   This  is  useful  when the input file is                 very large (e.g., a truth table with  more  than                 1000  terms) because distance-1 merge is O(n log                 n) rather than the EXPAND step of Espresso which                 is  O(n  *  n).   The  output should then be run                 through Espresso to complete  the  minimization.                 A  range  of  variables to be merged can also be                 specified using -rn-m (the default is  to  merge                 over all variables).<P><DT>    -Decho   <DD>Echoes  the  function  to standard output.  This                 can be used to get the complement of a  function                 when combined with -o.<P><DT>       -Dequiv  <DD>Identify  output variables which are equivalent.                 Takes into account the don't-care set and checks                 for  equivalence of both the ON-set and OFF-set.<P><DT>       -Dexact  <DD>Exact minimization algorithm (guarantees minimum                 number of product terms, and heuristically mini-                 mizes number of literals).   Potentially  expen-                 sive.<P><DT>       -Dsignature                <DD>Signature  Cubes  based Exact minimization algo-                 rithm  (guarantees  minimum  number  of  product                 terms,  and  heuristically  minimizes  number of                 literals).  On an average  faster  than  -Dexact                 and solves problems on which -Dexact fails.<P><DT>       -Dmany   <DD>Reads  and  minimizes PLA's until end-of-file is                 detected.  PLA's in the same file are  separated                 by .e.<P><DT>       -Dmap    <DD>Draw the Karnaugh maps for a binary-valued func-                 tion.<P><DT>       -Dmapdc  <DD>Derive from the binary-valued variable DONT_CARE                 a don't-care set, and then delete this variable.                 All input conditions for which an output changes                 when  DONT_CARE  changes  define  the don't-care                 conditions for that output.  This is a  hack  to                 support  don't-cares  from  high-level languages                 without a notion of don't-cares.<P><DT>       -Dopo    <DD>Perform output phase optimization (i.e.,  deter-                 mine which functions to complement to reduce the                 number of terms needed to  implement  the  func-                 tion).   After  choosing an assignment of phases                 for the outputs, the function is  minimized.   A                 simple  algorithm  is used which may become very                 expensive for a large number of  outputs  (e.g.,                 more than 40).<P><DT>       -Dopoall <DD>Minimize  the  function  with all possible phase                 assignments.   A  range  of  outputs  to   cycle                 through  can be given with -rn-m (the default is                 to use all outputs).  The option -S1  will  per-                 form   an  exact  minimization  for  each  phase                 assignment.  Be warned that opoall  requires  an                 exponential number of minimizations !<P><DT>       -Dpair   <DD>Choose  an  assignment  of the inputs to two-bit                 decoders, and minimize the function.  The  func-                 tion  MUST  be  minimized  first to achieve good                 results.  There are actually 4  different  algo-                 rithms,   of   increasing  cost,  which  may  be                 selected with -S1, -S2, or -S3.  The default  is                 -S0 which seems to give the best results for the                 cost.<P><DT>       -Dpairall<DD>Minimize the function with all possible  assign-                 ments of inputs to two-bit decoders.  The option                 -S1 will perform an exact minimization for  each                 assignment of inputs to decoders, and the option                 -S2 will perform an output-phase assignment  for                 each  assignment  of  inputs  to  decoders.   Be                 warned that pairall requires an exponential num-                 ber of minimizations !<P><DT>       -Dseparate                <DD>Remove the don't-care set from the ON-set of the                 function.<P><DT>       -Dso     <DD>Minimize each function one at a time as  a  sin-                 gle-output  function.   Terms will not be shared                 among the functions.  The option -S1  will  per-                 form  an  exact  minimization  for  each single-                 output function.<P><DT>       -Dso_both<DD>Minimize each function one at a time as  a  sin-                 gle-output  function, but choose the function or                 its complement based on which has  fewer  terms.                 The  option  -S1 will perform an exact minimiza-                 tion for each  single-output  function  and  its                 complement to determine which has fewer terms.<P><DT>       -Dstats  <DD>Provide  simple  statistics  on  the size of the                 function.<P><DT>       -Dverify <DD>Checks for Boolean  equivalence  of  two  PLA's.                 Reads  two filenames from the command line, each                 containing a single PLA.<P><DT>       -DPLAverify                <DD>Checks for Boolean equivalence of two  PLA's  by                 first  permuting  the  columns based on the user                 supplied variable names.   Reads  two  filenames                 from the command line.<P><DT>       -eeat    <DD>Normally comments are echoed from the input file                 to the output file.  This options  discards  any                 comments in the input file.<P><DT>       -efast   <DD>Stop  after  the  first  EXPAND  and IRREDUNDANT                 operations (i.e., do not iterate over the  solu-                 tion).<P><DT>       -ekiss   <DD>Sets up a kiss-style minimization problem.  This                 is a hack.<P><DT>       -eness   <DD>Essential primes will not be detected.<P><DT>       -enirr   <DD>The result will not necessarily be made irredun-                 dant  in  the final step which removes redundant                 literals.<P><DT>       -enunwrap<DD>The ON-set will not be unwrapped  before  begin-                 ning the minimization.<P><DT>       -eonset  <DD>Recompute  the  ON-set  before the minimization.                 Useful when the PLA has a large number of  prod-                 uct   terms   (e.g.,   an   exhaustive  list  of                 minterms).<P><DT>       -epos    <DD>Swaps the ON-set and  OFF-set  of  the  function                 after reading the function.  This can be used to                 minimize the OFF-set of a function.  .phase (see                 espresso(5))  in the input file can also specify                 an arbitrary choice of output phases.<P><DT>       -estrong <DD>Uses the alternate  strategy  SUPER_GASP  (as  a                 replacement for LAST_ GASP) which is more expen-                 sive, but occasionally provides better  results.<P><DT>       -o[type] <DD>Selects the output format.  By default, only the                 ON-set (i.e., type f) is output after the  mini-                 mization.  [type] can be one of f, d, r, fd, dr,                 fr, or fdr to select any combination of the  ON-                 set  (f),  the  OFF-set  (r)  or the DC-set (d).                 [type] may also be eqntott to  output  algebraic                 equations  acceptable  to eqntott(1OCTTOOLS), or                 pleasure to output an  unmerged  PLA  (with  the                 .label  and .group keywords) acceptable to plea-                 sure(1OCTTOOLS).<P><DT>       -s       <DD>Will provide a short summary of the execution of                 the  program  including  the initial cost of the                 function,  the  final  cost,  and  the  computer                 resources used.<P><DT>       -t       <DD>Will  produce  a  trace showing the execution of                 the program.  After each main step of the  algo-                 rithm,  a  single  line is printed which reports                 the processor time used, and the current cost of                 the function.<P><DT>       -x       <DD>Suppress printing of the solution.<P><DT>       -v [type]<DD>Specifies  verbose debugging detail.  Not gener-                 ally useful.<P></DL><DT><B>DIAGNOSTICS</B><DD>       Espresso will issue a warning message if  a  product  term       spans  more  than one line.  Usually this is an indication       that the number of inputs or outputs of  the  function  is       specified incorrectly.<P><DT><B>SEE ALSO</B><DD>       kiss(1OCTTOOLS),    pleasure(1OCTTOOLS),   pla(5OCTTOOLS),       <A href="espresso.5.html">espresso(5OCTTOOLS)</A><P>       R. Brayton, G. Hachtel, C. McMullen, and  A.  Sangiovanni-       Vincentelli,  Logic  Minimization Algorithms for VLSI Syn-       thesis, Kluwer Academic Publishers, 1984.<P>       P. McGeer, J. Sanghavi, R. Brayton,  and  A.  Sangiovanni-       Vincentelli,  "Espresso-Signature:  A  New Exact Minimizer       for Logic Functions," Design Automation Conf., Dallas, Jun       1993.<P>       R. Rudell, A. Sangiovanni-Vincentelli, "Espresso-MV: Algo-       rithms  for  Multiple-Valued  Logic  Minimization,"  Proc.       Cust. Int. Circ. Conf., Portland, May 1985.<P>       R.  Rudell,  "Multiple-Valued Minimization for PLA Synthe-       sis," Master's Report, University of California, Berkeley,       June 1986.<P>       R. Rudell, A. Sangiovanni-Vincentelli, "Exact Minimization       of Multiple-Valued Functions for PLA  Optimization",  Int.       Conf. Comp. Aid. Des., Santa Clara, November 1986.<P>       J.  Sanghavi,  "Espresso-Signature:  A New Exact Minimizer       for Logic Functions," Master's Report, University of Cali-       fornia, Berkeley, May 1993.<P><DT><B>AUTHOR</B><DD>       Please direct any questions or comments to:       Richard Rudell       205 Cory Hall       Dept. of EECS       University of California       Berkeley, California  94720<P>       Arpanet mail address is rudell@ic.Berkeley.EDU.<P><DT><B>COMMENTS</B><DD>       Default  is to pass comments and unrecognized options from       the input file to standard output  (sometimes  this  isn't       what you want).<P>       It  is  no  longer  possible  to  specify  the type on the       command line.<P>       There are a lot of options, but typical use  doesn't  need       them.<P>       This  manual  page refers to Version 2.4 of Espresso.  The       major change from Version 2.3 to Version 2.4 is the  addi-       tion of a new exact minimizer based on signature cubes (-D       signature subcommand).